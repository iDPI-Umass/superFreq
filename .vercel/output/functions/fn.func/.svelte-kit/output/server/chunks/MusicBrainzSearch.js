import { c as create_ssr_component, i as createEventDispatcher, d as add_attribute, v as validate_component, f as escape } from "./ssr.js";
import "devalue";
import "./client.js";
import "./parseData.js";
const css$1 = {
  code: "dialog.svelte-1rol5e1.svelte-1rol5e1{text-decoration:none}.dialog-header.svelte-1rol5e1.svelte-1rol5e1{display:flex;flex-direction:row;align-items:center;justify-content:space-between}h1.svelte-1rol5e1.svelte-1rol5e1{font-size:var(--freq-font-size-x-small)}.dialog-header.svelte-1rol5e1 button.svelte-1rol5e1{width:fit-content;text-transform:uppercase;padding:var(--freq-spacing-2x-small) var(--freq-spacing-x-small);font-weight:var(--freq-font-weight-bold);text-align:center}",
  map: `{"version":3,"file":"ListModal.svelte","sources":["ListModal.svelte"],"sourcesContent":["<!-- \\n\\tGenerates modal for lists, such as search results, list of user's collections, or list of users followed. \\n\\t\\n\\tExpects slot names \\"header-text\\" and \\"list\\". <ol> recommended over <ul> for accessibility.\\n\\n\\tRequires a button that executes the function dialog.showModal(). Something like this:\\n\\n\\t    <button \\n\\t\\t\\ton:click={() => ( showModal = true )}\\n\\t\\t\\ton:click|preventDefault={someFunction} \\n\\t\\t\\tdisabled={!(someProp)}\\n\\t\\t>\\n\\t\\t\\t{someText}\\n\\t\\t</button>\\n-->\\n\\n<script lang=\\"ts\\">import { onMount, createEventDispatcher } from \\"svelte\\";\\nexport let showModal;\\nlet dialog;\\n$: if (dialog && showModal) dialog.showModal();\\n$: if (dialog && !showModal) dialog.close();\\nonMount(() => {\\n  dialog.addEventListener(\\"click\\", (e) => {\\n    const dialogDimensions = dialog.getBoundingClientRect();\\n    if (e.clientX < dialogDimensions.left || e.clientX > dialogDimensions.right || e.clientY < dialogDimensions.top || e.clientY > dialogDimensions.bottom) {\\n      dialog.close();\\n    }\\n  });\\n});\\nconst dispatch = createEventDispatcher();\\n<\/script>\\n\\n<svelte:window\\n\\ton:keydown={(e) => {\\n\\t\\tif (e.key === 'Escape') {\\n\\t\\t\\tdispatch(dialog.close());\\n\\t\\t}\\n\\t}}\\n/>\\n\\n<dialog\\n    aria-label=\\"modal\\"\\n    bind:this={dialog}\\n\\ton:close={() => (showModal = false)}\\n>\\n\\t<div class=\\"dialog-header\\">\\n\\t\\t<h1>\\n\\t\\t\\t<slot name=\\"header-text\\" />\\n\\t\\t</h1>\\n\\t\\t<button \\n\\t\\t\\taria-label=\\"close modal\\" \\n\\t\\t\\tformmethod=\\"dialog\\" \\n\\t\\t\\ton:click={() => dialog.close()}\\n\\t\\t>\\n\\t\\t\\tx\\n\\t\\t</button>\\n\\t</div>\\n    <slot name=\\"list\\" />\\n</dialog>\\n\\n<style>\\n\\tdialog {\\n        text-decoration: none;\\n    }\\n\\t.dialog-header {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: row;\\n\\t\\talign-items: center;\\n\\t\\tjustify-content: space-between;\\n\\t}\\n\\th1 {\\n\\t\\tfont-size: var(--freq-font-size-x-small);\\n\\t}\\n\\t.dialog-header button {\\n\\t\\twidth: fit-content;\\n\\t\\ttext-transform: uppercase;\\n\\t\\tpadding: var(--freq-spacing-2x-small) var(--freq-spacing-x-small);\\n\\t\\tfont-weight: var(--freq-font-weight-bold);\\n\\t\\ttext-align: center;\\n\\t}\\n</style>"],"names":[],"mappings":"AA6DC,oCAAO,CACA,eAAe,CAAE,IACrB,CACH,4CAAe,CACd,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAClB,CACA,gCAAG,CACF,SAAS,CAAE,IAAI,wBAAwB,CACxC,CACA,6BAAc,CAAC,qBAAO,CACrB,KAAK,CAAE,WAAW,CAClB,cAAc,CAAE,SAAS,CACzB,OAAO,CAAE,IAAI,uBAAuB,CAAC,CAAC,IAAI,sBAAsB,CAAC,CACjE,WAAW,CAAE,IAAI,uBAAuB,CAAC,CACzC,UAAU,CAAE,MACb"}`
};
const ListModal = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { showModal } = $$props;
  let dialog;
  createEventDispatcher();
  if ($$props.showModal === void 0 && $$bindings.showModal && showModal !== void 0) $$bindings.showModal(showModal);
  $$result.css.add(css$1);
  return `   <dialog aria-label="modal" class="svelte-1rol5e1"${add_attribute("this", dialog, 0)}><div class="dialog-header svelte-1rol5e1"><h1 class="svelte-1rol5e1">${slots["header-text"] ? slots["header-text"]({}) : ``}</h1> <button aria-label="close modal" formmethod="dialog" class="svelte-1rol5e1" data-svelte-h="svelte-17gr06n">x</button></div> ${slots.list ? slots.list({}) : ``} </dialog>`;
});
const css = {
  code: ".search-bar.svelte-860t2d.svelte-860t2d{display:flex;flex-direction:row;height:fit-content;width:inherit;gap:0;align-items:center}.search-bar.svelte-860t2d button.svelte-860t2d{width:auto}span.dialog-header.svelte-860t2d.svelte-860t2d{text-transform:uppercase}button.standard.svelte-860t2d.svelte-860t2d{width:60px;padding-left:2px;padding-right:2px}ol.svelte-860t2d.svelte-860t2d{padding:0;list-style:none;font-size:var(--freq-font-size-small)}li.svelte-860t2d.svelte-860t2d{display:flex;flex-direction:row;align-items:center;margin-bottom:var(--freq-spacing-2x-small)}li.svelte-860t2d span.svelte-860t2d{font-size:var(--freq-font-size-medium);font-weight:var(--freq-font-weight-medium)}li.svelte-860t2d p.svelte-860t2d{margin:0 calc( var(--freq-inline-gap) * 2 )}@media screen and (max-width: 600px){.search-bar.svelte-860t2d .svelte-860t2d{flex-direction:column;align-items:start}}",
  map: '{"version":3,"file":"MusicBrainzSearch.svelte","sources":["MusicBrainzSearch.svelte"],"sourcesContent":["<!-- \\n Example:\\n\\n\\t<MusicBrainzSearch \\n\\t\\tsearchCategory={collectionType}\\n\\t\\tbind:addedItems={collectionItems}\\n\\t\\tbind:newItemAdded={itemAdded}\\n\\t\\tsearchButtonText={`add ${buttonTextLookup[collectionType]}`}\\n\\t\\tsearchPlaceholder={placeholderText}\\n\\t\\tmode=\\"collection\\"\\n\\t></MusicBrainzSearch>\\n-->\\n\\n<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nimport { enhance } from \\"$app/forms\\";\\nimport ListModal from \\"src/lib/components/modals/ListModal.svelte\\";\\nimport { categoriesTable } from \\"$lib/resources/parseData.ts\\";\\nexport let searchCategory;\\nexport let searchButtonText;\\nexport let searchPlaceholder;\\nexport let addedItems;\\nexport let newItemAdded;\\nexport let mode;\\nexport let limit = \\"25\\";\\nexport let query = \\"\\";\\nexport let requestSubmit = false;\\nexport let avatarSearch = false;\\nlet showModal = false;\\nlet mbData;\\nlet searchComplete;\\nasync function mbSearch() {\\n  const apiCategory = categoriesTable[`${searchCategory}`];\\n  let apiString = \\"https://musicbrainz.org/ws/2/\\";\\n  apiString = apiString.concat(apiCategory);\\n  const endpoint = new URL(apiString);\\n  endpoint.searchParams.set(\\"fmt\\", \\"json\\");\\n  endpoint.searchParams.set(\\"query\\", `${query}`);\\n  endpoint.searchParams.set(\\"limit\\", limit);\\n  if (searchCategory == \\"recordings\\") {\\n    endpoint.searchParams.set(\\"inc\\", \\"releases+release-groups+artist-rels\\");\\n  }\\n  const res = await fetch(endpoint);\\n  const searchResults = await res.json();\\n  const mbObjectKey = apiCategory.concat(\\"s\\");\\n  mbData = searchResults[mbObjectKey];\\n  searchComplete = true;\\n  showModal = true;\\n  return {\\n    mbData,\\n    searchComplete\\n  };\\n}\\nasync function getLabel(item) {\\n  const releaseGroupMbid = item[\\"mbid\\"];\\n  const releaseDate = item[\\"releaseDate\\"];\\n  let labelName = null;\\n  let labelMbid = null;\\n  const endpoint = `https://musicbrainz.org/ws/2/release?release-group=${releaseGroupMbid}&inc=labels&fmt=json`;\\n  const res = await fetch(endpoint);\\n  let releases = await res.json();\\n  releases = releases[\\"releases\\"];\\n  for (const release of releases) {\\n    if (releaseDate == release[\\"date\\"]) {\\n      if (release[\\"label-info\\"].length > 0) {\\n        labelName = release[\\"label-info\\"][0][\\"label\\"][\\"name\\"];\\n        labelMbid = release[\\"label-info\\"][0][\\"label\\"][\\"id\\"];\\n      }\\n      return { labelName, labelMbid };\\n    }\\n  }\\n}\\nasync function getCoverArt(release_group_mbid) {\\n  const endpoint = `http://coverartarchive.org/release-group/${release_group_mbid}/front`;\\n  const res = await fetch(endpoint);\\n  const coverArtUrl = await res[\\"url\\"];\\n  return coverArtUrl;\\n}\\nasync function addCollectionItem(item) {\\n  if (limit && addedItems.length === limit) {\\n    alert(`Only ${limit} items are allowed in this collection. Please delete an item before you add something new.`);\\n    return addedItems;\\n  }\\n  let labelName = null;\\n  let labelMbid = null;\\n  if (searchCategory == \\"artists\\") {\\n    addedItems = [...addedItems, {\\n      \\"item_position\\": addedItems.length,\\n      \\"artist_mbid\\": item[\\"id\\"],\\n      \\"artist_name\\": item[\\"name\\"],\\n      \\"release_group_mbid\\": null,\\n      \\"release_group_name\\": null,\\n      \\"release_date\\": null,\\n      \\"recording_mbid\\": null,\\n      \\"recording_name\\": null,\\n      \\"remixer_mbid\\": null,\\n      \\"img_url\\": null,\\n      \\"label_name\\": null,\\n      \\"label_mbid\\": null,\\n      \\"notes\\": null,\\n      \\"id\\": addedItems.length + 1\\n    }];\\n  } else if (searchCategory == \\"release_groups\\") {\\n    const releaseGroup = {\\n      mbid: item[\\"id\\"],\\n      releaseDate: item[\\"first-release-date\\"]\\n    };\\n    const label = await getLabel(releaseGroup);\\n    labelName = label?.labelName ?? null;\\n    labelMbid = label?.labelMbid ?? null;\\n    const coverArt = await getCoverArt(releaseGroup.mbid);\\n    addedItems = [...addedItems, {\\n      \\"item_position\\": addedItems.length,\\n      \\"artist_mbid\\": item[\\"artist-credit\\"][0][\\"artist\\"][\\"id\\"],\\n      \\"artist_name\\": item[\\"artist-credit\\"][0][\\"artist\\"][\\"name\\"],\\n      \\"release_group_mbid\\": item[\\"id\\"],\\n      \\"release_group_name\\": item[\\"title\\"],\\n      \\"release_date\\": item[\\"first-release-date\\"],\\n      \\"recording_mbid\\": null,\\n      \\"recording_name\\": null,\\n      \\"remixer_mbid\\": null,\\n      \\"img_url\\": coverArt,\\n      \\"label_name\\": labelName,\\n      \\"label_mbid\\": labelMbid,\\n      \\"notes\\": null,\\n      \\"id\\": addedItems.length + 1\\n    }];\\n  } else if (searchCategory == \\"recordings\\") {\\n    let remixerMbid = null;\\n    if (item[\\"relations\\"][0][\\"artist\\"][\\"type\\"] == \\"remixer\\") {\\n      remixerMbid = item[\\"relations\\"][0][\\"artist\\"][\\"id\\"];\\n    }\\n    const releaseGroup = item[\\"releases\\"][0][\\"release-group\\"][\\"id\\"];\\n    const releaseDate = item[\\"first-release-date\\"];\\n    const labelObject = {\\n      \\"mbid\\": releaseGroup,\\n      \\"releaseDate\\": releaseDate\\n    };\\n    const label = await getLabel(labelObject);\\n    labelName = label?.labelName ?? null;\\n    labelMbid = label?.labelMbid ?? null;\\n    const coverArt = await getCoverArt(releaseGroup);\\n    addedItems = [...addedItems, {\\n      \\"item_position\\": addedItems.length,\\n      \\"artist_mbid\\": item[\\"artist-credit\\"][0][\\"artist\\"][\\"id\\"],\\n      \\"artist_name\\": item[\\"artist-credit\\"][0][\\"artist\\"][\\"name\\"],\\n      \\"release_group_mbid\\": item[\\"releases\\"][0][\\"release-group\\"][\\"id\\"],\\n      \\"release_group_name\\": item[\\"releases\\"][0][\\"release-group\\"][\\"title\\"],\\n      \\"recording_mbid\\": item[\\"id\\"],\\n      \\"recording_name\\": item[\\"title\\"],\\n      \\"release_date\\": item[\\"first-release-date\\"],\\n      \\"remixer_mbid\\": remixerMbid,\\n      \\"img_url\\": coverArt,\\n      \\"label_name\\": labelName,\\n      \\"label_mbid\\": labelMbid,\\n      \\"notes\\": null,\\n      \\"id\\": addedItems.length + 1\\n    }];\\n  }\\n  newItemAdded = true;\\n  query = \\"\\";\\n  searchComplete = false;\\n  console.log(addedItems);\\n  return { newItemAdded, showModal, query, searchComplete };\\n}\\nasync function addSingleItem(item) {\\n  console.log(item);\\n  let labelName = null;\\n  let labelMbid = null;\\n  if (searchCategory == \\"artists\\") {\\n    addedItems = {\\n      \\"artist_mbid\\": item[\\"id\\"],\\n      \\"artist_name\\": item[\\"name\\"],\\n      \\"release_group_mbid\\": null,\\n      \\"release_group_name\\": null,\\n      \\"release_date\\": null,\\n      \\"recording_mbid\\": null,\\n      \\"recording_name\\": null,\\n      \\"remixer_mbid\\": null,\\n      \\"img_url\\": null,\\n      \\"label\\": null,\\n      \\"notes\\": null\\n    };\\n  } else if (searchCategory == \\"release_groups\\") {\\n    const releaseGroup = {\\n      mbid: item[\\"id\\"],\\n      releaseDate: item[\\"first-release-date\\"]\\n    };\\n    const label = await getLabel(releaseGroup);\\n    labelName = label?.labelName ?? null;\\n    labelMbid = label?.labelMbid ?? null;\\n    const coverArt = await getCoverArt(releaseGroup.mbid);\\n    addedItems = {\\n      \\"artist_mbid\\": item[\\"artist-credit\\"][0][\\"artist\\"][\\"id\\"],\\n      \\"artist_name\\": item[\\"artist-credit\\"][0][\\"artist\\"][\\"name\\"],\\n      \\"release_group_mbid\\": item[\\"id\\"],\\n      \\"release_group_name\\": item[\\"title\\"],\\n      \\"release_date\\": item[\\"first-release-date\\"],\\n      \\"recording_mbid\\": null,\\n      \\"recording_name\\": null,\\n      \\"remixer_mbid\\": null,\\n      \\"img_url\\": coverArt,\\n      \\"label_name\\": labelName,\\n      \\"label_mbid\\": labelMbid,\\n      \\"notes\\": null\\n    };\\n  } else if (searchCategory == \\"recordings\\") {\\n    console.log(item);\\n    let remixerMbid = null;\\n    if (item[\\"releations\\"] && item[\\"relations\\"][0][\\"artist\\"][\\"type\\"] == \\"remixer\\") {\\n      remixerMbid = item[\\"relations\\"][0][\\"artist\\"][\\"id\\"];\\n    }\\n    const releaseGroup = item[\\"releases\\"][0][\\"release-group\\"][\\"id\\"];\\n    const releaseDate = item[\\"first-release-date\\"];\\n    const labelObject = {\\n      \\"mbid\\": releaseGroup,\\n      \\"releaseDate\\": releaseDate\\n    };\\n    const label = await getLabel(labelObject);\\n    labelName = label?.labelName ?? null;\\n    labelMbid = label?.labelMbid ?? null;\\n    const coverArt = await getCoverArt(releaseGroup);\\n    addedItems = {\\n      \\"artist_mbid\\": item[\\"artist-credit\\"][0][\\"artist\\"][\\"id\\"],\\n      \\"artist_name\\": item[\\"artist-credit\\"][0][\\"artist\\"][\\"name\\"],\\n      \\"release_group_mbid\\": item[\\"releases\\"][0][\\"release-group\\"][\\"id\\"],\\n      \\"release_group_name\\": item[\\"releases\\"][0][\\"release-group\\"][\\"title\\"],\\n      \\"recording_mbid\\": item[\\"id\\"],\\n      \\"recording_name\\": item[\\"title\\"],\\n      \\"release_date\\": item[\\"first-release-date\\"],\\n      \\"remixer_mbid\\": remixerMbid,\\n      \\"img_url\\": coverArt,\\n      \\"label_name\\": labelName,\\n      \\"label_mbid\\": labelMbid,\\n      \\"notes\\": null\\n    };\\n  }\\n  newItemAdded = true;\\n  showModal = false;\\n  query = \\"\\";\\n  searchComplete = false;\\n  console.log(addedItems);\\n  return { newItemAdded, showModal, addedItems, query, searchComplete };\\n}\\n<\/script>\\n\\n<div class=\\"search-bar\\">\\n\\t<ListModal bind:showModal>\\n\\t\\t<h1 slot=\\"header-text\\">\\n\\t\\t\\tResults for <span class=\\"dialog-header\\">{query}</span>\\n\\t\\t</h1>\\n\\t\\t<div slot=\\"list\\">\\n\\t\\t\\t{#if searchComplete}\\n\\t\\t\\t\\t<ol>\\n\\t\\t\\t\\t\\t{#each mbData as item}\\n\\t\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t\\t{#if mode === \\"collection\\"}\\n\\t\\t\\t\\t\\t\\t\\t<button \\n\\t\\t\\t\\t\\t\\t\\t\\tclass=\\"standard\\"\\n\\t\\t\\t\\t\\t\\t\\t\\taria-label=\\"add item\\"\\n\\t\\t\\t\\t\\t\\t\\t\\ton:click|preventDefault={() => addCollectionItem(item)}\\n\\t\\t\\t\\t\\t\\t\\t\\ton:click={() => ( showModal = false )}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t+ add\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t{:else if mode === \\"single\\"}\\n\\t\\t\\t\\t\\t\\t\\t<button \\n\\t\\t\\t\\t\\t\\t\\t\\tclass=\\"standard\\"\\n\\t\\t\\t\\t\\t\\t\\t\\taria-label=\\"add item\\"\\n\\t\\t\\t\\t\\t\\t\\t\\ton:click|preventDefault={() => addSingleItem(item)}\\n\\t\\t\\t\\t\\t\\t\\t\\ton:click={() => ( showModal = false )}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t+ add\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t\\t{#if searchCategory == \\"artists\\"}\\n\\t\\t\\t\\t\\t\\t\\t<span>{item[\\"name\\"]}</span>\\n\\t\\t\\t\\t\\t\\t\\t({item[\\"area\\"][\\"name\\"]}, \\n\\t\\t\\t\\t\\t\\t\\t{item[\\"life-span\\"][\\"begin\\"]})\\n\\t\\t\\t\\t\\t\\t{:else if searchCategory == \\"release_groups\\"}\\n\\t\\t\\t\\t\\t\\t\\t<span >{item[\\"title\\"]}</span>  by \\n\\t\\t\\t\\t\\t\\t\\t{item[\\"artist-credit\\"][0][\\"artist\\"][\\"name\\"]} \\n\\t\\t\\t\\t\\t\\t\\t({item[\\"first-release-date\\"]})\\n\\t\\t\\t\\t\\t\\t{:else if searchCategory == \\"recordings\\"}\\n\\t\\t\\t\\t\\t\\t\\t<span>{item[\\"title\\"]}</span> by \\n\\t\\t\\t\\t\\t\\t\\t{item[\\"artist-credit\\"][0][\\"artist\\"][\\"name\\"]} \\n\\t\\t\\t\\t\\t\\t\\t({item[\\"disambiguation\\"] ?? item[\\"releases\\"][0][\\"release-group\\"][\\"title\\"]})\\n\\t\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t\\t<!-- {#if avatarSearch}\\n\\t\\t\\t\\t\\t\\t\\t<img class=\\"thumbnail\\" src={item[\\"img_url\\"]} />\\n\\t\\t\\t\\t\\t\\t{/if} -->\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t<hr />\\n\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t</ol>\\n\\t\\t\\t{/if}\\n\\t\\t</div>\\n\\t</ListModal>\\n\\t<form class=\\"search\\">\\n\\t\\t<button \\n\\t\\t\\tclass=\\"double-border-top\\"\\n\\t\\t\\ton:click={mbSearch} \\n\\t\\t\\t\\n\\t\\t\\tdisabled={!(searchCategory)}\\n\\t\\t>\\n\\t\\t\\t<div class=\\"inner-border\\">\\n\\t\\t\\t\\t{searchButtonText}\\n\\t\\t\\t</div>\\n\\t\\t</button>\\n\\t\\t<input\\n\\t\\t\\tclass=\\"search\\" \\n\\t\\t\\ttype=\\"search\\" \\n\\t\\t\\tid=\\"searchQuery\\" \\n\\t\\t\\tname=\\"query\\" \\n\\t\\t\\tplaceholder={searchPlaceholder}\\n\\t\\t\\taria-label={searchPlaceholder}\\n\\t\\t\\tsize=\\"40\\" \\n\\t\\t\\tbind:value={query}\\n\\t\\t/>\\n\\t</form>\\n</div>\\n\\n<style>\\n    .search-bar {\\n        display: flex;\\n        flex-direction: row;\\n\\t\\theight: fit-content;\\n\\t\\twidth: inherit;\\n        gap: 0;\\n        align-items: center;\\n    }\\n    .search-bar button{\\n        width: auto;\\n    }\\n\\tspan.dialog-header {\\n\\t\\ttext-transform: uppercase;\\n\\t}\\n\\tbutton.standard {\\n\\t\\twidth: 60px;\\n\\t\\tpadding-left: 2px;\\n\\t\\tpadding-right: 2px;\\n\\t}\\n    ol {\\n\\t\\tpadding: 0;\\n        list-style: none;\\n\\t\\tfont-size: var(--freq-font-size-small);\\n\\n    }\\n\\tli {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: row;\\n\\t\\talign-items: center;\\n\\t\\tmargin-bottom: var(--freq-spacing-2x-small);\\n\\t}\\n    li span {\\n\\t\\tfont-size: var(--freq-font-size-medium);\\n        font-weight: var(--freq-font-weight-medium);\\n    }\\n\\tli p {\\n\\t\\tmargin: 0 calc( var(--freq-inline-gap) * 2 );\\n\\t}\\n\\timg {\\n\\t\\twidth: var(--freq-image-thumbnail-small);\\n\\t\\tmargin-right: 1%;\\n\\t}\\n\\n\\t@media screen and (max-width: 600px) {\\n        .search-bar * {\\n            flex-direction: column;\\n\\t\\t\\talign-items: start;\\n        }\\n    }\\n</style>"],"names":[],"mappings":"AAoUI,uCAAY,CACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACzB,MAAM,CAAE,WAAW,CACnB,KAAK,CAAE,OAAO,CACR,GAAG,CAAE,CAAC,CACN,WAAW,CAAE,MACjB,CACA,yBAAW,CAAC,oBAAM,CACd,KAAK,CAAE,IACX,CACH,IAAI,0CAAe,CAClB,cAAc,CAAE,SACjB,CACA,MAAM,qCAAU,CACf,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAChB,CACG,8BAAG,CACL,OAAO,CAAE,CAAC,CACJ,UAAU,CAAE,IAAI,CACtB,SAAS,CAAE,IAAI,sBAAsB,CAEnC,CACH,8BAAG,CACF,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,IAAI,uBAAuB,CAC3C,CACG,gBAAE,CAAC,kBAAK,CACV,SAAS,CAAE,IAAI,uBAAuB,CAAC,CACjC,WAAW,CAAE,IAAI,yBAAyB,CAC9C,CACH,gBAAE,CAAC,eAAE,CACJ,MAAM,CAAE,CAAC,CAAC,MAAM,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,EAC3C,CAMA,OAAO,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAE,CAC9B,yBAAW,CAAC,cAAE,CACV,cAAc,CAAE,MAAM,CAC/B,WAAW,CAAE,KACR,CACJ"}'
};
const MusicBrainzSearch = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { searchCategory } = $$props;
  let { searchButtonText } = $$props;
  let { searchPlaceholder } = $$props;
  let { addedItems } = $$props;
  let { newItemAdded } = $$props;
  let { mode } = $$props;
  let { limit = "25" } = $$props;
  let { query = "" } = $$props;
  let { requestSubmit = false } = $$props;
  let { avatarSearch = false } = $$props;
  let showModal = false;
  if ($$props.searchCategory === void 0 && $$bindings.searchCategory && searchCategory !== void 0) $$bindings.searchCategory(searchCategory);
  if ($$props.searchButtonText === void 0 && $$bindings.searchButtonText && searchButtonText !== void 0) $$bindings.searchButtonText(searchButtonText);
  if ($$props.searchPlaceholder === void 0 && $$bindings.searchPlaceholder && searchPlaceholder !== void 0) $$bindings.searchPlaceholder(searchPlaceholder);
  if ($$props.addedItems === void 0 && $$bindings.addedItems && addedItems !== void 0) $$bindings.addedItems(addedItems);
  if ($$props.newItemAdded === void 0 && $$bindings.newItemAdded && newItemAdded !== void 0) $$bindings.newItemAdded(newItemAdded);
  if ($$props.mode === void 0 && $$bindings.mode && mode !== void 0) $$bindings.mode(mode);
  if ($$props.limit === void 0 && $$bindings.limit && limit !== void 0) $$bindings.limit(limit);
  if ($$props.query === void 0 && $$bindings.query && query !== void 0) $$bindings.query(query);
  if ($$props.requestSubmit === void 0 && $$bindings.requestSubmit && requestSubmit !== void 0) $$bindings.requestSubmit(requestSubmit);
  if ($$props.avatarSearch === void 0 && $$bindings.avatarSearch && avatarSearch !== void 0) $$bindings.avatarSearch(avatarSearch);
  $$result.css.add(css);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    $$rendered = `  <div class="search-bar svelte-860t2d">${validate_component(ListModal, "ListModal").$$render(
      $$result,
      { showModal },
      {
        showModal: ($$value) => {
          showModal = $$value;
          $$settled = false;
        }
      },
      {
        list: () => {
          return `<div slot="list" class="svelte-860t2d">${``}</div>`;
        },
        "header-text": () => {
          return `<h1 slot="header-text" class="svelte-860t2d">Results for <span class="dialog-header svelte-860t2d">${escape(query)}</span></h1>`;
        }
      }
    )} <form class="search svelte-860t2d"><button class="double-border-top svelte-860t2d" ${!searchCategory ? "disabled" : ""}><div class="inner-border svelte-860t2d">${escape(searchButtonText)}</div></button> <input class="search svelte-860t2d" type="search" id="searchQuery" name="query"${add_attribute("placeholder", searchPlaceholder, 0)}${add_attribute("aria-label", searchPlaceholder, 0)} size="40"${add_attribute("value", query, 0)}></form> </div>`;
  } while (!$$settled);
  return $$rendered;
});
export {
  MusicBrainzSearch as M
};
