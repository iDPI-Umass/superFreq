import { c as create_ssr_component, v as validate_component, h as each, d as add_attribute, f as escape } from "../../../../../chunks/ssr.js";
import "../../../../../chunks/client.js";
import "devalue";
import "../../../../../chunks/localStorage.js";
import { N as NowPlayingPost, U as UserActionsMenu } from "../../../../../chunks/NowPlayingPost.js";
import { P as PanelHeader } from "../../../../../chunks/PanelHeader.js";
import { G as GridList } from "../../../../../chunks/GridList.js";
import { N as NewNowPlayingPost } from "../../../../../chunks/NewNowPlayingPost.js";
import { d as decoration } from "../../../../../chunks/feed-item-decoration.js";
const css$2 = {
  code: ".button-spacer.svelte-7vjjpw{display:flex;flex-direction:row;align-items:center;justify-content:center;margin:var(--freq-spacing-medium) auto}.standard.svelte-7vjjpw{margin:0}",
  map: '{"version":3,"file":"MiniFeed.svelte","sources":["MiniFeed.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { goto } from \\"$app/navigation\\";\\nimport PanelHeader from \\"$lib/components/PanelHeader.svelte\\";\\nimport NowPlayingPost from \\"./Posts/NowPlayingPost.svelte\\";\\nimport decoration from \\"$lib/assets/images/feed-item-decoration.svg\\";\\nexport let feedItems;\\n<\/script>\\n\\n\\n<div class=\\"feed-panel\\">\\n    <PanelHeader>\\n        <a class=\\"panel-header-link\\" href=\\"/feed\\">feed</a>\\n    </PanelHeader>\\n    {#if feedItems.length == 0}\\n        <p>Nothing in your feed? Try following some more <a href=\\"/users\\">users</a> and <a href=\\"/collections\\" >collections</a>.</p>\\n    {/if}\\n    {#each feedItems as item}\\n    <div class=\\"feed-item\\">\\n        {#if Object.keys(item).includes( \'now_playing_post_id\' )}\\n        <a href={`/posts/${item.username}/now-playing/${item.feed_item_timestamp.toISOString()}`}>\\n            <div class=\\"feed-item-user-data\\">\\n                <img src={item.avatar_url} alt={`${item.display_name}\'s avatar`} class=\\"feed-avatar\\" />\\n                {item.display_name}\\n                posted: \\n            </div>\\n        </a>\\n        <div class=\\"feed-item-row\\">\\n            <img class=\\"feed-item-ornament\\" src={decoration} alt=\\"decoration\\" />\\n            <div class=\\"feed-item-now-playing\\">\\n                <NowPlayingPost\\n                    post={item}\\n                    mode=\\"feed\\"\\n                ></NowPlayingPost>\\n            </div>\\n        </div>\\n        {:else if Object.keys(item).includes( \'comment_id\' )}\\n            <a href={`/${item.original_poster_username}/now-playing/${item.original_post_date}#${item.username?.concat(item.created_at.valueOf().toString())}`}>\\n                <div class=\\"feed-item-one-liner\\">\\n                    <img src={item.avatar_url} alt={`${item.display_name}\'s avatar`} class=\\"feed-avatar\\" />\\n                    {item.display_name} commented on {item.original_poster_display_name}\'s post\\n                </div>\\n            </a>\\n        {:else if Object.keys(item).includes( \'reaction_id\' )}\\n            <a href={`/posts/${item.original_poster_username}/now-playing/${item.feed_item_timestamp.toISOString()}`}>\\n                <div class=\\"feed-item-one-liner\\">\\n                    <img src={item.avatar_url} alt={`${item.display_name}\'s avatar`} class=\\"feed-avatar\\" />\\n                    {item.display_name} liked {item.original_poster_display_name}\'s post\\n                </div>\\n            </a>\\n        {:else if Object.keys(item).includes( \'collection_follow_id\' )}\\n            <a href={`/collection/${item.collection_id}`}>\\n                <div class=\\"feed-item-one-liner\\">\\n                    <img src={item.avatar_url} alt={`${item.display_name}\'s avatar`} class=\\"feed-avatar\\" />\\n                    {item.display_name}\\n                    followed a collection: \\n                    <span class=\\"feed-item-subject\\">\\n                        {item.title}\\n                    </span>\\n                </div>\\n            </a>\\n        {:else if Object.keys(item).includes( \'collection_edit_id\' )}\\n            <div class=\\"feed-item\\">\\n                <a href={`/collection/${item.collection_id}`}>\\n                    <div class=\\"feed-item-one-liner\\">\\n                        <img src={item.avatar_url} alt={`${item.display_name}\'s avatar`} class=\\"feed-avatar\\" />\\n                        {item.display_name}\\n                        edited the collection: \\n                        <span class=\\"feed-item-subject\\">\\n                            {item.title}\\n                        </span>\\n                    </div>\\n                </a>\\n            </div>\\n        {/if}\\n    </div>\\n    {/each}\\n    <div class=\\"button-spacer\\">\\n        <button class=\\"standard\\" on:click={() => goto(\'/feed\')}>\\n            see more\\n        </button>\\n    </div>\\n\\n</div>\\n\\n<style>\\n    .button-spacer {\\n        display: flex;\\n        flex-direction: row;\\n        align-items: center;\\n        justify-content: center;\\n        margin: var(--freq-spacing-medium) auto;\\n    }\\n    .standard {\\n        margin: 0;\\n    }\\n</style>"],"names":[],"mappings":"AAoFI,4BAAe,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,IAAI,qBAAqB,CAAC,CAAC,IACvC,CACA,uBAAU,CACN,MAAM,CAAE,CACZ"}'
};
const MiniFeed = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { feedItems } = $$props;
  if ($$props.feedItems === void 0 && $$bindings.feedItems && feedItems !== void 0) $$bindings.feedItems(feedItems);
  $$result.css.add(css$2);
  return `<div class="feed-panel">${validate_component(PanelHeader, "PanelHeader").$$render($$result, {}, {}, {
    default: () => {
      return `<a class="panel-header-link" href="/feed" data-svelte-h="svelte-1ykvt8z">feed</a>`;
    }
  })} ${feedItems.length == 0 ? `<p data-svelte-h="svelte-6uetj4">Nothing in your feed? Try following some more <a href="/users">users</a> and <a href="/collections">collections</a>.</p>` : ``} ${each(feedItems, (item) => {
    return `<div class="feed-item">${Object.keys(item).includes("now_playing_post_id") ? `<a${add_attribute("href", `/posts/${item.username}/now-playing/${item.feed_item_timestamp.toISOString()}`, 0)}><div class="feed-item-user-data"><img${add_attribute("src", item.avatar_url, 0)}${add_attribute("alt", `${item.display_name}'s avatar`, 0)} class="feed-avatar"> ${escape(item.display_name)}
                posted: 
            </div></a> <div class="feed-item-row"><img class="feed-item-ornament"${add_attribute("src", decoration, 0)} alt="decoration"> <div class="feed-item-now-playing">${validate_component(NowPlayingPost, "NowPlayingPost").$$render($$result, { post: item, mode: "feed" }, {}, {})}</div> </div>` : `${Object.keys(item).includes("comment_id") ? `<a${add_attribute("href", `/${item.original_poster_username}/now-playing/${item.original_post_date}#${item.username?.concat(item.created_at.valueOf().toString())}`, 0)}><div class="feed-item-one-liner"><img${add_attribute("src", item.avatar_url, 0)}${add_attribute("alt", `${item.display_name}'s avatar`, 0)} class="feed-avatar"> ${escape(item.display_name)} commented on ${escape(item.original_poster_display_name)}&#39;s post</div> </a>` : `${Object.keys(item).includes("reaction_id") ? `<a${add_attribute("href", `/posts/${item.original_poster_username}/now-playing/${item.feed_item_timestamp.toISOString()}`, 0)}><div class="feed-item-one-liner"><img${add_attribute("src", item.avatar_url, 0)}${add_attribute("alt", `${item.display_name}'s avatar`, 0)} class="feed-avatar"> ${escape(item.display_name)} liked ${escape(item.original_poster_display_name)}&#39;s post</div> </a>` : `${Object.keys(item).includes("collection_follow_id") ? `<a${add_attribute("href", `/collection/${item.collection_id}`, 0)}><div class="feed-item-one-liner"><img${add_attribute("src", item.avatar_url, 0)}${add_attribute("alt", `${item.display_name}'s avatar`, 0)} class="feed-avatar"> ${escape(item.display_name)}
                    followed a collection: 
                    <span class="feed-item-subject">${escape(item.title)} </span></div> </a>` : `${Object.keys(item).includes("collection_edit_id") ? `<div class="feed-item"><a${add_attribute("href", `/collection/${item.collection_id}`, 0)}><div class="feed-item-one-liner"><img${add_attribute("src", item.avatar_url, 0)}${add_attribute("alt", `${item.display_name}'s avatar`, 0)} class="feed-avatar"> ${escape(item.display_name)}
                        edited the collection: 
                        <span class="feed-item-subject">${escape(item.title)}</span> </div></a> </div>` : ``}`}`}`}`} </div>`;
  })} <div class="button-spacer svelte-7vjjpw"><button class="standard svelte-7vjjpw" data-svelte-h="svelte-1w48hif">see more</button></div> </div>`;
});
const css$1 = {
  code: ".posts-spacing.svelte-dx1qci{display:flex;flex-direction:column;padding:var(--freq-spacing-medium);gap:var(--freq-spacer-gap)}.button-spacer.svelte-dx1qci{display:flex;flex-direction:row;align-items:center;justify-content:center;margin:var(--freq-spacing-medium) auto}.standard.svelte-dx1qci{margin:0}",
  map: '{"version":3,"file":"NowPlayingPostsSample.svelte","sources":["NowPlayingPostsSample.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { goto } from \\"$app/navigation\\";\\nimport PanelHeader from \\"$lib/components/PanelHeader.svelte\\";\\nimport NowPlayingPost from \\"./NowPlayingPost.svelte\\";\\nexport let posts;\\nexport let username;\\nexport let displayName;\\nconsole.log(posts);\\n<\/script>\\n\\n<div class=\\"panel-medium\\">\\n    <PanelHeader>\\n        <a class=\\"panel-header-link\\" href={`/user/${username}/now-playing-posts`}>\\n            {displayName}\'s Now Playing posts\\n        </a>\\n    </PanelHeader>\\n    <div class=\\"posts-spacing\\">\\n    {#each posts as post}\\n        <NowPlayingPost\\n            post={post}\\n            mode=\\"feed\\"\\n        >\\n        </NowPlayingPost>\\n    {/each}\\n    </div>\\n    <div class=\\"button-spacer\\">\\n        <button class=\\"standard\\" on:click={() => goto(`/user/${username}/now-playing-posts`)}>\\n            see more\\n        </button>\\n    </div>\\n</div>\\n\\n<style>\\n    .posts-spacing {\\n        display: flex;\\n        flex-direction: column;\\n        padding: var(--freq-spacing-medium);\\n        gap: var(--freq-spacer-gap);\\n    }\\n    .button-spacer {\\n        display: flex;\\n        flex-direction: row;\\n        align-items: center;\\n        justify-content: center;\\n        margin: var(--freq-spacing-medium) auto;\\n    }\\n    .standard {\\n        margin: 0;\\n    }\\n</style>"],"names":[],"mappings":"AAgCI,4BAAe,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,IAAI,qBAAqB,CAAC,CACnC,GAAG,CAAE,IAAI,iBAAiB,CAC9B,CACA,4BAAe,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,IAAI,qBAAqB,CAAC,CAAC,IACvC,CACA,uBAAU,CACN,MAAM,CAAE,CACZ"}'
};
const NowPlayingPostsSample = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { posts } = $$props;
  let { username } = $$props;
  let { displayName } = $$props;
  console.log(posts);
  if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0) $$bindings.posts(posts);
  if ($$props.username === void 0 && $$bindings.username && username !== void 0) $$bindings.username(username);
  if ($$props.displayName === void 0 && $$bindings.displayName && displayName !== void 0) $$bindings.displayName(displayName);
  $$result.css.add(css$1);
  return `<div class="panel-medium">${validate_component(PanelHeader, "PanelHeader").$$render($$result, {}, {}, {
    default: () => {
      return `<a class="panel-header-link"${add_attribute("href", `/user/${username}/now-playing-posts`, 0)}>${escape(displayName)}&#39;s Now Playing posts</a>`;
    }
  })} <div class="posts-spacing svelte-dx1qci">${each(posts, (post) => {
    return `${validate_component(NowPlayingPost, "NowPlayingPost").$$render($$result, { post, mode: "feed" }, {}, {})}`;
  })}</div> <div class="button-spacer svelte-dx1qci"><button class="standard svelte-dx1qci" data-svelte-h="svelte-1c8yhhh">see more</button></div> </div>`;
});
const css = {
  code: ".content.svelte-tt9x3c{max-width:var(--freq-desktop-width)}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { goto } from \\"$app/navigation\\";\\nimport { enhance } from \\"$app/forms\\";\\nimport { username } from \\"$lib/resources/localStorage\\";\\nimport Settings from \\"lucide-svelte/icons/settings\\";\\nimport UserActionsMenu from \\"$lib/components/menus/UserActionsMenu.svelte\\";\\nimport PanelHeader from \\"$lib/components/PanelHeader.svelte\\";\\nimport GridList from \\"$lib/components/GridList.svelte\\";\\nimport { Info } from \\"lucide-svelte\\";\\nimport NewNowPlayingPost from \\"$lib/components/Posts/NewNowPlayingPost.svelte\\";\\nimport MiniFeed from \\"$lib/components/MiniFeed.svelte\\";\\nimport NowPlayingPostsSample from \\"src/lib/components/Posts/NowPlayingPostsSample.svelte\\";\\nexport let data;\\nexport let form;\\n$: data;\\nlet { sessionUserId, profileData, feedItems, profileUsername, posts } = data;\\n$: ({ sessionUserId, profileData, feedItems, profileUsername, posts } = data);\\nconst { profileUserData, followInfo, permission, profileUserBlockInfo, profileUserFlagInfo } = profileData;\\nconst profileUserId = profileUserData?.id;\\nlet collectionCount = null;\\nlet collectionFollowingCount = null;\\nlet userFollowingCount = null;\\nlet nowPlayingPostsCount = null;\\nlet topAlbumsCollection = null;\\nif (permission) {\\n  collectionCount = profileData[\\"collectionCount\\"][0].count;\\n  collectionFollowingCount = profileData[\\"collectionFollowingCount\\"][0].count;\\n  userFollowingCount = profileData[\\"userFollowingCount\\"][0].count;\\n  nowPlayingPostsCount = profileData[\\"nowPlayingPostsCount\\"][0].count;\\n  topAlbumsCollection = profileData.topAlbumsCollection;\\n}\\nlet topAlbumsReturned;\\nif (topAlbumsCollection) {\\n  topAlbumsReturned = true;\\n}\\nconst sessionUserBlocked = permission ? false : true;\\n$: followingNow = form?.followStatus ?? followInfo?.follows_now ?? false;\\n$: profileUserBlocked = form?.blockStatus ?? profileUserBlockInfo?.active ?? false;\\n$: profileUserFlagged = form?.flagStatus ?? profileUserFlagInfo?.active ?? false;\\nconst displayName = profileUserData?.display_name;\\n<\/script>\\n\\n<svelte:head>\\n\\t<title>\\n\\t\\t{displayName}'s Profile\\n\\t</title>\\n</svelte:head>\\n\\n\\n<div class=\\"profile-info\\">\\n    <div class=\\"profile-info-box-left\\">\\n        <img src={profileUserData?.avatar_url} alt=\\"\${profileUserData?.display_name}'s avatar\\" />\\n        <div class=\\"profile-info-box-column\\">\\n            <div class=\\"profile-username-buttons-row\\">\\n                <div class=\\"profile-displayname-username-column\\">\\n                    <h1>{profileUserData?.display_name}</h1>\\n                    <p class=\\"data-muted\\">{profileUserData?.username}</p>\\n                </div>\\n                <div class=\\"profile-buttons-group\\">\\n                {#if profileUserData?.id == sessionUserId }\\n                    <button class=\\"double-border-top\\" on:click={() => goto('/account')}>\\n                        <div class=\\"inner-border-condensed\\">\\n                            edit profile\\n                        </div>\\n                    </button>\\n                    <!-- <button class=\\"double-border-top\\">\\n                        <div class=\\"inner-border-condensed\\">\\n                            <div class=\\"buttons-group-icon\\">\\n                                <Settings size=\\"16\\"></Settings>\\n                            </div>\\n                        </div>\\n                    </button> -->\\n                {:else}\\n                    <form\\n                        method=\\"POST\\"\\n                        action=\\"?/followUser\\"\\n                        use:enhance\\n                    >\\n                        <input \\n                            type=\\"hidden\\"\\n                            name=\\"profile-user-id\\" \\n                            id=\\"profile-user-id\\"\\n                            value={profileUserId}\\n                        />\\n                        <button \\n                            class=\\"standard\\" \\n                            type=\\"submit\\"\\n                            formaction=\\"?/followUser\\"\\n                        >\\n                        {#if followingNow == true}\\n                            unfollow\\n                        {:else}\\n                            + follow\\n                        {/if}\\n                        </button>  \\n                    </form>\\n                    <UserActionsMenu\\n                        mode='profileMenu'\\n                        blocked={profileUserBlocked}\\n                        flagged={profileUserFlagged}\\n                        profileUserId={profileUserId}\\n                        success={form?.success}\\n                    ></UserActionsMenu>\\n                {/if}\\n                </div>\\n            </div>\\n            <p>{profileUserData?.about ?? ''}</p>\\n        </div>\\n    </div>\\n    <div class=\\"profile-info-box-right\\">\\n        <div class=\\"profile-stats-box\\" aria-label=\\"user metrics\\">\\n            <div class=\\"metric\\" aria-label=\\"metric\\">\\n                <a class=\\"metrics\\" href=\\"/user/{profileUsername}/collections\\">\\n                    <div class=\\"numeral\\">\\n                        <p class=\\"metric-numerals\\">\\n                            {collectionCount}\\n                        </p>\\n                    </div>\\n                    <p class=\\"data-muted-uppercase\\">\\n                        collections \\n                    </p>\\n                </a>\\n            </div>\\n            <div class=\\"metric\\" aria-label=\\"metric\\">\\n                <a class=\\"metrics\\" href=\\"/user/{profileUsername}/now-playing-posts\\">\\n                    <div class=\\"numeral\\">\\n                        <p class=\\"metric-numerals\\">\\n                            {nowPlayingPostsCount}\\n                        </p>\\n                    </div>\\n                    <p class=\\"data-muted-uppercase\\">\\n                        posts \\n                    </p>\\n                </a>\\n            </div>\\n            <div class=\\"metric\\" aria-label=\\"metric\\">\\n                <a class=\\"metrics\\" href=\\"/user/{profileUsername}/collections-following\\">\\n                    <div class=\\"numeral\\">\\n                        <p class=\\"metric-numerals\\">\\n                            {collectionFollowingCount}\\n                        </p>\\n                    </div>\\n                    <p class=\\"data-muted-uppercase\\">\\n                        collections followed \\n                    </p>\\n                </a>\\n            </div>\\n            <div class=\\"metric\\" aria-label=\\"metric\\">\\n                <a class=\\"metrics\\" href=\\"/user/{profileUsername}/users-following\\">\\n                    <div class=\\"numeral\\">\\n                        <p class=\\"metric-numerals\\">\\n                            {userFollowingCount}\\n                        </p>\\n                    </div>\\n                    <p class=\\"data-muted-uppercase\\">\\n                        users followed\\n                    </p>\\n                </a>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"border-full-vw\\"></div>\\n\\n<div class=\\"content\\">\\n    <div class=\\"panel-medium\\">\\n        {#if topAlbumsCollection?.length > 0}\\n        <PanelHeader>\\n            top albums\\n            {#if profileUserData?.id == sessionUserId}\\n            <button class=\\"standard\\" on:click={() => goto(\`./\${username}/top-albums\`)}>edit</button>\\n            {/if}\\n        </PanelHeader>\\n        <GridList\\n            collectionContents={topAlbumsCollection}\\n            collectionReturned={topAlbumsReturned}\\n            collectionType=\\"release_groups\\"\\n            layout=\\"condensed-grid\\"\\n            mode=\\"view\\"\\n        >\\n        </GridList>\\n    \\n        {:else if topAlbumsCollection?.length == 0 && profileUserData?.id == sessionUserId}\\n        <PanelHeader>\\n            top albums\\n        </PanelHeader>\\n        <div class=\\"panel-button-buffer\\">\\n            <button class=\\"standard\\" on:click={() => goto(\`./\${username}/top-albums\`)}>\\n                choose your top albums\\n            </button>\\n        </div>\\n        {/if}\\n    </div>\\n    \\n    {#if profileUserData?.id == sessionUserId}\\n        <NewNowPlayingPost></NewNowPlayingPost>\\n        <MiniFeed\\n            feedItems={feedItems?.feedData}\\n        ></MiniFeed>\\n    {:else}\\n        <NowPlayingPostsSample\\n            posts={posts}\\n            displayName={displayName}\\n            username={profileUsername}\\n        ></NowPlayingPostsSample>\\n    {/if}\\n</div>\\n\\n<style>\\n    .content {\\n        max-width: var(--freq-desktop-width);\\n    }\\n</style>"],"names":[],"mappings":"AAgNI,sBAAS,CACL,SAAS,CAAE,IAAI,oBAAoB,CACvC"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let followingNow;
  let profileUserBlocked;
  let profileUserFlagged;
  let { data } = $$props;
  let { form } = $$props;
  let { sessionUserId, profileData, feedItems, profileUsername, posts } = data;
  const { profileUserData, followInfo, permission, profileUserBlockInfo, profileUserFlagInfo } = profileData;
  const profileUserId = profileUserData?.id;
  let collectionCount = null;
  let collectionFollowingCount = null;
  let userFollowingCount = null;
  let nowPlayingPostsCount = null;
  let topAlbumsCollection = null;
  if (permission) {
    collectionCount = profileData["collectionCount"][0].count;
    collectionFollowingCount = profileData["collectionFollowingCount"][0].count;
    userFollowingCount = profileData["userFollowingCount"][0].count;
    nowPlayingPostsCount = profileData["nowPlayingPostsCount"][0].count;
    topAlbumsCollection = profileData.topAlbumsCollection;
  }
  let topAlbumsReturned;
  if (topAlbumsCollection) {
    topAlbumsReturned = true;
  }
  const displayName = profileUserData?.display_name;
  if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
  if ($$props.form === void 0 && $$bindings.form && form !== void 0) $$bindings.form(form);
  $$result.css.add(css);
  ({ sessionUserId, profileData, feedItems, profileUsername, posts } = data);
  followingNow = form?.followStatus ?? followInfo?.follows_now ?? false;
  profileUserBlocked = form?.blockStatus ?? profileUserBlockInfo?.active ?? false;
  profileUserFlagged = form?.flagStatus ?? profileUserFlagInfo?.active ?? false;
  return `${$$result.head += `<!-- HEAD_svelte-1dz2g57_START -->${$$result.title = `<title> ${escape(displayName)}&#39;s Profile
	</title>`, ""}<!-- HEAD_svelte-1dz2g57_END -->`, ""} <div class="profile-info"><div class="profile-info-box-left"><img${add_attribute("src", profileUserData?.avatar_url, 0)} alt="${"$" + escape(profileUserData?.display_name, true) + "'s avatar"}"> <div class="profile-info-box-column"><div class="profile-username-buttons-row"><div class="profile-displayname-username-column"><h1>${escape(profileUserData?.display_name)}</h1> <p class="data-muted">${escape(profileUserData?.username)}</p></div> <div class="profile-buttons-group">${profileUserData?.id == sessionUserId ? `<button class="double-border-top" data-svelte-h="svelte-1fratcr"><div class="inner-border-condensed">edit profile</div></button> ` : `<form method="POST" action="?/followUser"><input type="hidden" name="profile-user-id" id="profile-user-id"${add_attribute("value", profileUserId, 0)}> <button class="standard" type="submit" formaction="?/followUser">${followingNow == true ? `unfollow` : `+ follow`}</button></form> ${validate_component(UserActionsMenu, "UserActionsMenu").$$render(
    $$result,
    {
      mode: "profileMenu",
      blocked: profileUserBlocked,
      flagged: profileUserFlagged,
      profileUserId,
      success: form?.success
    },
    {},
    {}
  )}`}</div></div> <p>${escape(profileUserData?.about ?? "")}</p></div></div> <div class="profile-info-box-right"><div class="profile-stats-box" aria-label="user metrics"><div class="metric" aria-label="metric"><a class="metrics" href="${"/user/" + escape(profileUsername, true) + "/collections"}"><div class="numeral"><p class="metric-numerals">${escape(collectionCount)}</p></div> <p class="data-muted-uppercase" data-svelte-h="svelte-1mxlcvb">collections</p></a></div> <div class="metric" aria-label="metric"><a class="metrics" href="${"/user/" + escape(profileUsername, true) + "/now-playing-posts"}"><div class="numeral"><p class="metric-numerals">${escape(nowPlayingPostsCount)}</p></div> <p class="data-muted-uppercase" data-svelte-h="svelte-1tn0cyx">posts</p></a></div> <div class="metric" aria-label="metric"><a class="metrics" href="${"/user/" + escape(profileUsername, true) + "/collections-following"}"><div class="numeral"><p class="metric-numerals">${escape(collectionFollowingCount)}</p></div> <p class="data-muted-uppercase" data-svelte-h="svelte-174crhv">collections followed</p></a></div> <div class="metric" aria-label="metric"><a class="metrics" href="${"/user/" + escape(profileUsername, true) + "/users-following"}"><div class="numeral"><p class="metric-numerals">${escape(userFollowingCount)}</p></div> <p class="data-muted-uppercase" data-svelte-h="svelte-prawe6">users followed</p></a></div></div></div></div> <div class="border-full-vw"></div> <div class="content svelte-tt9x3c"><div class="panel-medium">${topAlbumsCollection?.length > 0 ? `${validate_component(PanelHeader, "PanelHeader").$$render($$result, {}, {}, {
    default: () => {
      return `top albums
            ${profileUserData?.id == sessionUserId ? `<button class="standard" data-svelte-h="svelte-7rznue">edit</button>` : ``}`;
    }
  })} ${validate_component(GridList, "GridList").$$render(
    $$result,
    {
      collectionContents: topAlbumsCollection,
      collectionReturned: topAlbumsReturned,
      collectionType: "release_groups",
      layout: "condensed-grid",
      mode: "view"
    },
    {},
    {}
  )}` : `${topAlbumsCollection?.length == 0 && profileUserData?.id == sessionUserId ? `${validate_component(PanelHeader, "PanelHeader").$$render($$result, {}, {}, {
    default: () => {
      return `top albums`;
    }
  })} <div class="panel-button-buffer"><button class="standard" data-svelte-h="svelte-myb72r">choose your top albums</button></div>` : ``}`}</div> ${profileUserData?.id == sessionUserId ? `${validate_component(NewNowPlayingPost, "NewNowPlayingPost").$$render($$result, {}, {}, {})} ${validate_component(MiniFeed, "MiniFeed").$$render($$result, { feedItems: feedItems?.feedData }, {}, {})}` : `${validate_component(NowPlayingPostsSample, "NowPlayingPostsSample").$$render(
    $$result,
    {
      posts,
      displayName,
      username: profileUsername
    },
    {},
    {}
  )}`} </div>`;
});
export {
  Page as default
};
