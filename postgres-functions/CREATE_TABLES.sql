create table public.artists (
  artist_mbid text not null,
  artist_name text not null,
  added_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  discogs_img_url text null,
  constraint artists_pkey primary key (artist_mbid),
  constraint artists_artist_mbid_key unique (artist_mbid)
) TABLESPACE pg_default;

create table public.bug_reports (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  user_id uuid not null,
  type text not null,
  path text not null,
  description text not null,
  dev_notes text null,
  resolved boolean not null default false,
  dev_log jsonb null default '{}'::jsonb,
  constraint bug_reports_pkey primary key (id),
  constraint bug_reports_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;

create table public.collections_contents (
  id bigint generated by default as identity not null,
  collection_id bigint not null,
  inserted_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  artist_mbid text null,
  release_group_mbid text null,
  recording_mbid text null,
  item_position integer null,
  notes text null,
  changelog json null default '{}'::json,
  label_mbid text null,
  inserted_by uuid null,
  updated_by uuid null,
  from_post bigint null,
  from_collection bigint null,
  item_type text null,
  label_name text null,
  episode_url text null,
  user_added_metadata_id bigint null,
  connected_collection_id bigint null,
  constraint collections_contents_pkey primary key (id),
  constraint collections_contents_collection_id_fkey foreign KEY (collection_id) references collections_info (collection_id) on update CASCADE on delete CASCADE,
  constraint collections_contents_connected_collection_id_fkey foreign KEY (connected_collection_id) references collections_info (collection_id),
  constraint collections_contents_from_collection_fkey foreign KEY (from_collection) references collections_info (collection_id),
  constraint collections_contents_from_post_fkey foreign KEY (from_post) references posts (id),
  constraint collections_contents_inserted_by_fkey foreign KEY (inserted_by) references profiles (id),
  constraint collections_contents_recording_mbid_fkey foreign KEY (recording_mbid) references recordings (recording_mbid) on update CASCADE on delete RESTRICT,
  constraint collections_contents_release_group_mbid_fkey foreign KEY (release_group_mbid) references release_groups (release_group_mbid) on update CASCADE on delete RESTRICT,
  constraint collections_contents_updated_by_fkey foreign KEY (updated_by) references profiles (id),
  constraint collections_contents_artist_mbid_fkey foreign KEY (artist_mbid) references artists (artist_mbid) on update CASCADE on delete RESTRICT,
  constraint collections_contents_user_added_metadata_id_fkey foreign KEY (user_added_metadata_id) references user_added_metadata (id)
) TABLESPACE pg_default;

create table public.collections_info (
  collection_id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null,
  owner_id uuid not null,
  status text not null default 'public'::text,
  created_by uuid not null,
  title text not null,
  type text null,
  changelog json null default '{}'::json,
  description_text text null,
  updated_by uuid null,
  default_view_sort text null default 'default'::text,
  is_top_albums boolean null default false,
  title_search tsvector GENERATED ALWAYS as (
    to_tsvector('english'::regconfig, COALESCE(title, ''::text))
  ) STORED null,
  constraint collections_info_pkey primary key (collection_id),
  constraint collections_info_created_by_fkey foreign KEY (created_by) references profiles (id) on update CASCADE on delete RESTRICT,
  constraint collections_info_owner_id_fkey foreign KEY (owner_id) references profiles (id) on update CASCADE on delete RESTRICT,
  constraint collections_info_updated_by_fkey foreign KEY (updated_by) references profiles (id)
) TABLESPACE pg_default;

create table public.collections_updates (
  id bigint generated by default as identity not null,
  collection_id bigint not null,
  updated_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  updated_by uuid not null,
  constraint collections_updates_pkey primary key (id),
  constraint public_collections_updates_collection_id_fkey foreign KEY (collection_id) references collections_info (collection_id) on update CASCADE on delete RESTRICT,
  constraint public_collections_updates_updated_by_fkey foreign KEY (updated_by) references profiles (id) on update CASCADE on delete RESTRICT
) TABLESPACE pg_default;

create table public.groups (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  name text not null,
  parent_group bigint null,
  constraint groups_pkey primary key (id),
  constraint groups_parent_group_fkey foreign KEY (parent_group) references groups (id)
) TABLESPACE pg_default;

create table public.invites (
  id bigint generated by default as identity not null,
  inserted_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  approved_at timestamp with time zone null,
  email text null,
  "group" bigint null,
  approved boolean not null default false,
  user_id uuid null,
  referred_by text null,
  constraint approved_users_pkey primary key (id),
  constraint approved_users_email_key unique (email),
  constraint approved_users_group_fkey foreign KEY ("group") references groups (id) on update CASCADE on delete set null,
  constraint approved_users_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;

create table public.moderation_permissions (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  created_at timestamp with time zone not null default now(),
  role text not null,
  "group" bigint null,
  active boolean not null default true,
  constraint moderation_permissions_pkey primary key (id),
  constraint moderation_permissions_group_fkey foreign KEY ("group") references groups (id),
  constraint moderation_permissions_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;

create table public.moderation_updates (
  id bigint generated by default as identity not null,
  updated_at timestamp with time zone not null default now(),
  moderator_id uuid not null,
  moderation_item_id text not null,
  target_action text not null,
  target_item_type text not null,
  constraint moderation_updates_pkey primary key (id),
  constraint moderation_updates_moderator_id_fkey foreign KEY (moderator_id) references profiles (id)
) TABLESPACE pg_default;

create table public.posts (
  id bigint generated by default as identity not null,
  text text null,
  user_id uuid not null,
  type text not null,
  parent_post_id bigint null,
  recording_mbid text null,
  item_type text null,
  artist_name text null,
  release_group_name text null,
  recording_name text null,
  status text not null default 'new'::text,
  created_at timestamp with time zone not null,
  updated_at timestamp with time zone not null,
  changelog json not null default '{}'::json,
  listen_url text null,
  episode_title text null,
  show_title text null,
  embed_id text null,
  embed_source text null,
  embed_account text null,
  release_group_mbid text null,
  artist_mbid text null,
  user_added_metadata_id bigint null,
  reply_to bigint null,
  parent_collection_id bigint null,
  constraint posts_pkey primary key (id),
  constraint posts_parent_collection_id_fkey foreign KEY (parent_collection_id) references collections_info (collection_id),
  constraint posts_parent_fkey foreign KEY (parent_post_id) references posts (id),
  constraint posts_artist_mbid_fkey foreign KEY (artist_mbid) references artists (artist_mbid),
  constraint posts_reply_to_fkey foreign KEY (reply_to) references posts (id),
  constraint posts_user_added_metadata_id_fkey foreign KEY (user_added_metadata_id) references user_added_metadata (id),
  constraint posts_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;

create table public.profiles (
  id uuid not null,
  updated_at timestamp with time zone not null default now(),
  display_name text null,
  avatar_url text null,
  website text null,
  changelog jsonb null default '{}'::jsonb,
  about text null,
  avatar_mbid text null,
  top_albums_collection_id bigint null,
  username text null,
  constraint profiles_pkey primary key (id),
  constraint profiles_username_key unique (username),
  constraint profiles_avatar_mbid_fkey foreign KEY (avatar_mbid) references release_groups (release_group_mbid),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE,
  constraint profiles_top_albums_collection_id_fkey foreign KEY (top_albums_collection_id) references collections_info (collection_id)
) TABLESPACE pg_default;

create table public.reactions (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  post_id bigint null,
  reaction text null,
  updated_at timestamp with time zone not null,
  changelog json not null default '{}'::json,
  active boolean not null default true,
  collection_id bigint null,
  constraint reacts_pkey primary key (id),
  constraint post_reactions_collection_id_fkey foreign KEY (collection_id) references collections_info (collection_id),
  constraint reacts_post_id_fkey foreign KEY (post_id) references posts (id),
  constraint reacts_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;

create table public.recordings (
  recording_mbid text not null,
  recording_name text not null,
  release_group_mbid text null,
  remixer_artist_mbid text null,
  added_at timestamp with time zone null default (now() AT TIME ZONE 'utc'::text),
  release_date text null,
  artist_mbid text not null,
  constraint recordings_pkey primary key (recording_mbid),
  constraint recordings_recording_mbid_key unique (recording_mbid),
  constraint public_recordings_artist_mbid_fkey foreign KEY (artist_mbid) references artists (artist_mbid) on update CASCADE on delete RESTRICT,
  constraint recordings_release_group_mbid_fkey foreign KEY (release_group_mbid) references release_groups (release_group_mbid) on update CASCADE on delete RESTRICT,
  constraint recordings_remixer_artist_mbid_fkey foreign KEY (remixer_artist_mbid) references artists (artist_mbid) on update CASCADE on delete RESTRICT
) TABLESPACE pg_default;

create table public.release_groups (
  release_group_mbid text not null,
  release_group_name text not null,
  artist_mbid text not null,
  release_date text null,
  img_url text null,
  added_at timestamp with time zone null default (now() AT TIME ZONE 'utc'::text),
  label text null,
  last_fm_img_url text null,
  constraint release_groups_pkey primary key (release_group_mbid),
  constraint release_groups_release_group_mbid_key unique (release_group_mbid),
  constraint release_groups_artist_mbid_fkey foreign KEY (artist_mbid) references artists (artist_mbid) on update CASCADE on delete RESTRICT
) TABLESPACE pg_default;

create table public.social_graph (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  target_user_id uuid null,
  follows_now boolean not null default false,
  changelog json null default '{}'::json,
  updated_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  collection_id bigint null,
  user_role text null,
  constraint social_graph_pkey primary key (id),
  constraint unique_social_relationship unique (user_id, target_user_id),
  constraint social_graph_collection_id_fkey foreign KEY (collection_id) references collections_info (collection_id),
  constraint social_graph_target_user_id_fkey foreign KEY (target_user_id) references profiles (id) on update RESTRICT on delete RESTRICT,
  constraint social_graph_user_id_fkey foreign KEY (user_id) references profiles (id) on update CASCADE on delete RESTRICT
) TABLESPACE pg_default;

create table public.user_added_metadata (
  id bigint generated by default as identity not null,
  added_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  artist_name text null,
  release_group_name text null,
  recording_name text null,
  episode_title text null,
  show_title text null,
  added_by uuid not null,
  post_id bigint null,
  collection_id bigint null,
  listen_url text null,
  artist_mbid text null,
  release_group_mbid text null,
  embed_source text null,
  embed_id text null,
  embed_account text null,
  img_url text null,
  release_date text null,
  tracklist text[] null,
  constraint user_added_metadata_pkey primary key (id),
  constraint user_added_metadata_added_by_fkey foreign KEY (added_by) references profiles (id),
  constraint user_added_metadata_artist_mbid_fkey foreign KEY (artist_mbid) references artists (artist_mbid),
  constraint user_added_metadata_collection_id_fkey foreign KEY (collection_id) references collections_info (collection_id),
  constraint user_added_metadata_post_id_fkey foreign KEY (post_id) references posts (id),
  constraint user_added_metadata_release_group_mbid_fkey foreign KEY (release_group_mbid) references release_groups (release_group_mbid)
) TABLESPACE pg_default;

create table public.user_moderation_actions (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  target_user_id uuid null,
  target_post_id bigint null,
  type text not null,
  updated_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  needs_review boolean not null default true,
  notes text null,
  changelog json not null default '{}'::json,
  active boolean not null,
  moderator_id uuid null,
  moderator_reviewed_at timestamp with time zone null,
  moderation_log json null default '{}'::json,
  target_post_slug text null,
  constraint user_moderation_actions_pkey primary key (id),
  constraint user_moderation_actions_moderator_id_fkey foreign KEY (moderator_id) references profiles (id),
  constraint user_moderation_actions_target_post_id_fkey foreign KEY (target_post_id) references posts (id),
  constraint user_moderation_actions_target_user_id_fkey foreign KEY (target_user_id) references profiles (id),
  constraint user_moderation_actions_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
